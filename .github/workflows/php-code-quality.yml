# This workflow checks the quality of PHP code in the Simple WP Optimizer plugin.
# It runs PHP_CodeSniffer to ensure adherence to WordPress coding standards,
# performs PHP compatibility checks to ensure the plugin works across PHP versions,
# and validates PHP syntax to catch errors before they reach production.
# The workflow is triggered when PHP files are changed in pushes or pull requests.

name: PHP Code Quality

on:
  push:
    branches: [ main ]
    paths:
      - '**.php'
  pull_request:
    branches: [ main ]
    paths:
      - '**.php'

# Define permissions needed for auto-committing fixes
permissions:
  contents: write

jobs:
  php-code-quality:
    name: PHP ${{ matrix.php-version }} Code Quality Checks
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php-version: ['7.4', '8.2']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP ${{ matrix.php-version }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: mbstring, intl, curl
          tools: composer:v2, phpcs, wp-coding-standards
          
      - name: Install dependencies
        run: |
          # Install dependencies, always ignoring platform requirements for CI reliability
          composer config platform.php ${{ matrix.php-version }}
          composer install --prefer-dist --no-progress --no-suggest --ignore-platform-reqs
          
          # Verify installation was successful
          if [ ! -d "vendor" ]; then
            echo "::warning::Composer installation failed, using direct approach"
            composer require --dev wp-coding-standards/wpcs dealerdirect/phpcodesniffer-composer-installer phpcompatibility/php-compatibility --no-interaction
          fi


      - name: Run PHP Code Beautifier and Fixer
        run: |
          echo "Running PHP Code Beautifier and Fixer to automatically fix code style issues..."
          if [ -f phpcs.xml ] || [ -f phpcs.xml.dist ]; then
            # Try to fix code style issues automatically using the project's standards
            vendor/bin/phpcbf --standard=phpcs.xml || vendor/bin/phpcbf --standard=phpcs.xml.dist || true
          else
            # Use our custom ruleset if no phpcs config file exists
            echo "Using custom phpcbf ruleset to fix alignment and common issues"
            vendor/bin/phpcbf --standard=phpcbf-custom.xml --extensions=php . || true
          fi
          # Check if changes were made and output a summary
          if git diff --name-only | grep -q "\.php$"; then
            echo "PHPCBF fixed issues in the following files:"
            git diff --name-only | grep "\.php$"
          else
            echo "No code style issues fixed by PHPCBF."
          fi
          # The '|| true' ensures the workflow continues even if phpcbf exits with non-zero code

      - name: Run PHP_CodeSniffer
        run: |
          # Check if phpcs configuration exists
          if [ -f phpcs.xml ] || [ -f phpcs.xml.dist ]; then
            echo "Using project's PHPCS configuration"
            vendor/bin/phpcs --standard=phpcs.xml || vendor/bin/phpcs --standard=phpcs.xml.dist
          else
            # Use our existing custom ruleset file
            echo "Using custom PHPCS ruleset to address common WordPress issues"
            vendor/bin/phpcs --standard=phpcs-custom.xml .
          fi

      - name: Run PHP Compatibility Check
        run: |
          # Install PHP compatibility standards and required packages
          composer require --dev phpcompatibility/php-compatibility squizlabs/php_codesniffer wp-coding-standards/wpcs dealerdirect/phpcodesniffer-composer-installer --no-interaction || true

          # Set up PHPCompatibility standards properly with absolute paths
          ABSOLUTE_PHPCOMP_PATH=$(composer config vendor-dir)/phpcompatibility/php-compatibility
          ABSOLUTE_WPCS_PATH=$(composer config vendor-dir)/wp-coding-standards/wpcs
          vendor/bin/phpcs --config-set installed_paths ${ABSOLUTE_PHPCOMP_PATH},${ABSOLUTE_WPCS_PATH}

          # Verify configured standards
          echo "Available coding standards:"
          vendor/bin/phpcs -i

          # Try to auto-fix compatibility issues where possible
          vendor/bin/phpcbf --standard=phpcs.xml --extensions=php --ignore=vendor/,node_modules/ . || true

          # Run the actual compatibility check
          if ! vendor/bin/phpcs --standard=phpcs.xml --extensions=php --ignore=vendor/,node_modules/ .; then
            echo "Error: The phpcs.xml standard may have issues with PHPCompatibility reference."
            echo "Trying with direct PHPCompatibility standard..."
            cp phpcs.xml phpcs.xml.bak
            cat > phpcs-compat.xml << 'EOF'
<?xml version="1.0"?>
<ruleset name="PHP Compatibility Check">
    <description>Check PHP compatibility for WordPress plugin</description>
    <config name="installed_paths" value="./vendor/phpcompatibility/php-compatibility"/>
    <rule ref="PHPCompatibility"/>
    <config name="testVersion" value="7.4-8.4"/>
    <arg name="extensions" value="php"/>
    <file>.</file>
    <exclude-pattern>/vendor/*</exclude-pattern>
    <exclude-pattern>/node_modules/*</exclude-pattern>
</ruleset>
EOF

          vendor/bin/phpcs --config-set installed_paths ${ABSOLUTE_PHPCOMP_PATH},${ABSOLUTE_WPCS_PATH}
          vendor/bin/phpcs --standard=phpcs-compat.xml --extensions=php --ignore=vendor/,node_modules/ .
        fi

      - name: Fix text argument escaping issues
        run: |
          echo "Checking for text argument escaping issues..."
          # Find PHP files with potential escaping issues (echo with variables not wrapped in esc_html)
          FILES_WITH_ESCAPING_ISSUES=$(grep -r --include="*.php" -l 'echo ".*\$' --exclude-dir={vendor,node_modules,tests} . || echo "")
          if [ -n "$FILES_WITH_ESCAPING_ISSUES" ]; then
            echo "Found potential escaping issues in the following files:"
            echo "$FILES_WITH_ESCAPING_ISSUES"
            # Find problematic patterns and fix them
            for FILE in $FILES_WITH_ESCAPING_ISSUES; do
              echo "Checking $FILE for escaping issues..."
              # Replace direct echo of strings with variables to use esc_html
              sed -i 's/echo "\(.*\)\$\([a-zA-Z0-9_]*\)\(.*\)";/if (function_exists('\''esc_html'\'')) { echo esc_html("\1$\2\3"); } else { echo "\1$\2\3"; }/g' "$FILE" || true
              # Also fix single quoted strings
              sed -i 's/echo '\''\(.*\)\$\([a-zA-Z0-9_]*\)\(.*\)'\'';/if (function_exists('\''esc_html'\'')) { echo esc_html('\''\1$\2\3'\''); } else { echo '\''\1$\2\3'\''; }/g' "$FILE" || true
              # Fix multi-line echo statements
              sed -i 's/echo \("\|\x27\)\(.*\)\$\([a-zA-Z0-9_]*\)\(.*\)\("\|\x27\) \. \("\|\x27\)\(.*\)\("\|\x27\);/if (function_exists('\''esc_html'\'')) { echo esc_html(\1\2$\3\4\5 . \6\7\8); } else { echo \1\2$\3\4\5 . \6\7\8; }/g' "$FILE" || true
              echo "Applied escaping fixes to $FILE"
            done
          else
            echo "No obvious text argument escaping issues found."
          fi

      - name: Check PHP syntax
        run: |
          find . -type f -name "*.php" -not -path "./vendor/*" -not -path "./node_modules/*" -print0 | xargs -0 -n1 php -l
          
      - name: Commit auto-fixed code style changes
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          # Configure Git
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Check if there are changes to commit
          if git diff --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          
          # Stage all PHP files that were modified
          git add "*.php"
          
          # Commit with descriptive message including which coding standards were applied
          if [ -f phpcs.xml ]; then
            STANDARD="phpcs.xml"
          elif [ -f phpcs.xml.dist ]; then
            STANDARD="phpcs.xml.dist"
          else
            STANDARD="WordPress-Core"
          fi
          
          # Commit and push changes
          git commit -m "Auto-fix code style issues with PHPCBF [standard: $STANDARD] [skip ci]" || true
          git push || echo "Failed to push changes, but workflow will continue"

# This workflow runs automated tests for the Simple WP Optimizer plugin against multiple
# WordPress and PHP versions to ensure compatibility across environments.
# It sets up a MySQL database, installs WordPress, and runs PHPUnit tests in a matrix configuration.
# Testing multiple PHP versions (7.4 through 8.2) and WordPress versions (5.6 through latest)
# helps catch compatibility issues before they affect users.

name: WordPress Plugin Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Define permissions
permissions:
  contents: read

jobs:
  # First check if we can run tests (if all required files exist)
  pre-check:
    name: Check Test Files
    runs-on: ubuntu-latest
    outputs:
      can_test: ${{ steps.check-files.outputs.can_test }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check for test files
        id: check-files
        run: |
          if [ -f "composer.json" ] && [ -d "tests" ] && [ -f "tests/bootstrap.php" ] && [ -d "bin" ] && [ -f "bin/install-wp-tests.sh" ]; then
            echo "Required test files found"
            echo "can_test=true" >> $GITHUB_OUTPUT
          else
            echo "Missing required test files - tests will be skipped"
            echo "can_test=false" >> $GITHUB_OUTPUT
          fi
  
  # Main test job - only runs if all required files exist
  test:
    name: WordPress ${{ matrix.wordpress }} - PHP ${{ matrix.php }}
    needs: pre-check
    if: needs.pre-check.outputs.can_test == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php: ['7.4', '8.0', '8.1']
        wordpress: ['latest', '6.0', '5.9']
        include:
          - php: '8.2'
            wordpress: 'latest'
          - php: '7.4'
            wordpress: '5.6'
            
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: wordpress_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup PHP ${{ matrix.php }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: dom, curl, libxml, mbstring, zip, pdo, mysql, pdo_mysql, bcmath, intl, gd, exif, iconv
          coverage: none
      
      - name: Install SVN and jq
        run: |
          sudo apt-get update
          sudo apt-get install -y subversion jq bc
      
      # Robust PHPUnit installation with enhanced error handling
      - name: Verify and Install PHPUnit
        run: |
          echo "Installing PHPUnit for PHP ${{ matrix.php }}"
          
          # Define PHP version for easier conditions
          PHP_VERSION="${{ matrix.php }}"
          
          # Remove any existing lock file to ensure clean install
          rm -f composer.lock
          
          # Setup environment information for debugging
          echo "::notice::Debugging environment variables:"
          echo "PHP Version: $PHP_VERSION"
          php -v
          
          # Configure platform version in composer.json for better dependency resolution
          cp composer.json composer.json.backup
          
          # For PHP 8.x, use PHPUnit 9.5
          if [[ "$PHP_VERSION" == "8.0" || "$PHP_VERSION" == "8.1" || "$PHP_VERSION" == "8.2" ]]; then
            echo "::notice::Using PHPUnit 9.5 for PHP $PHP_VERSION"
            
            # Configure platform and dependencies using multiple jq commands instead of heredoc
            jq '.config.platform.php = "8.0.0"' composer.json.backup > composer.json.tmp1
            jq '.["require-dev"]["phpunit/phpunit"] = "^9.5"' composer.json.tmp1 > composer.json.tmp2
            jq '.["require-dev"]["yoast/phpunit-polyfills"] = "^2.0"' composer.json.tmp2 > composer.json
            
            # Add PHP 8 specific test script if needed
            if [[ "$PHP_VERSION" == "8.2" ]]; then
              jq '.scripts["test:php8"] = "php run-phpunit.php"' composer.json > composer.json.tmp3
              mv composer.json.tmp3 composer.json
            fi
            
            # Install using direct require for more reliable installation
            echo "::notice::Installing PHPUnit via direct require for PHP $PHP_VERSION"
            composer require --dev phpunit/phpunit:^9.5 yoast/phpunit-polyfills:^2.0 --no-progress --ignore-platform-reqs || {
              echo "::error::PHPUnit installation failed. Retrying with fallback method..."
              # Fallback: try removing composer.lock and trying again
              rm -f composer.lock
              composer require --dev phpunit/phpunit:^9.5 yoast/phpunit-polyfills:^2.0 --no-progress --ignore-platform-reqs || {
                echo "::error::PHPUnit installation failed on retry as well. Debugging composer error logs:"
                cat composer.lock 2>/dev/null || echo "composer.lock not generated"
                composer diagnose || echo "Composer diagnose command failed"
                exit 1
              }
            }
          else
            # For PHP 7.x, use PHPUnit 7.5
            echo "::notice::Using PHPUnit 7.5 for PHP $PHP_VERSION"
            
            # Configure platform
            jq '.config.platform.php = "7.4.0"' composer.json.backup > composer.json
            
            # Install using direct require for more reliable installation
            composer require --dev phpunit/phpunit:^7.5 yoast/phpunit-polyfills:^1.0 --no-progress || {
              echo "::warning::PHPUnit installation failed. Retrying with fallback method..."
              # Fallback: try removing composer.lock and trying again
              rm -f composer.lock
              composer require --dev phpunit/phpunit:^7.5 yoast/phpunit-polyfills:^1.0 --no-progress --ignore-platform-reqs || {
                echo "::error::PHPUnit installation failed on retry as well. Debugging composer error logs:"
                composer diagnose || echo "Composer diagnose command failed"
                exit 1
              }
            }
          fi
          
          # Clean up temporary files
          rm -f composer.json.tmp* composer.json.backup
          
          # Verify PHPUnit installation
          if [ ! -f "vendor/bin/phpunit" ]; then
            echo "::error::PHPUnit installation unsuccessful. Cannot continue with tests."
            ls -la vendor || echo "vendor directory not found or empty"
            exit 1
          fi
          
          # Show installed PHPUnit version
          echo "Installed PHPUnit version:"
          vendor/bin/phpunit --version || echo "PHPUnit seems to be installed but not working properly"
      
      - name: Check Test Environment
        id: check-test-env
        run: |
          if [ ! -f "bin/install-wp-tests.sh" ]; then
            echo "::warning::bin/install-wp-tests.sh script not found. Tests will be skipped."
            echo "test_env_ready=false" >> $GITHUB_OUTPUT
          elif [ ! -d "tests" ]; then
            echo "::warning::tests directory not found. Tests will be skipped."
            echo "test_env_ready=false" >> $GITHUB_OUTPUT
          else
            echo "test_env_ready=true" >> $GITHUB_OUTPUT
          fi
      
      # Enhanced WordPress Test Environment Setup
      - name: Setup WordPress Test Environment
        if: steps.check-test-env.outputs.test_env_ready == 'true'
        run: |
          # Ensure database exists and is clean
          echo "Setting up test database..."
          mysql -u root -h 127.0.0.1 -e "DROP DATABASE IF EXISTS wordpress_test;"
          mysql -u root -h 127.0.0.1 -e "CREATE DATABASE wordpress_test;"
          
          # Make the install script executable
          chmod +x bin/install-wp-tests.sh
          
          # Run the script with detailed logging
          echo "Installing WordPress test environment for version ${{ matrix.wordpress }}..."
          bash bin/install-wp-tests.sh wordpress_test root '' 127.0.0.1 ${{ matrix.wordpress }} || {
            echo "::error::Failed to setup WordPress test environment. Showing detailed error information:"
            find /tmp -name "wordpress-tests-lib-install-*.log" -exec cat {} \; 2>/dev/null || echo "No install logs found."
            exit 1
          }
          
          # Verify the test environment was created successfully
          if [ ! -d "/tmp/wordpress-tests-lib" ] || [ ! -f "/tmp/wordpress-tests-lib/includes/functions.php" ]; then
            echo "::error::WordPress test environment setup failed. Missing required files."
            exit 1
          fi
          
          echo "WordPress test environment successfully set up."
      
      - name: Run tests
        if: steps.check-test-env.outputs.test_env_ready == 'true'
        run: |
          if [ -f "vendor/bin/phpunit" ]; then
            # Get the PHPUnit version
            PHPUNIT_VERSION=$(vendor/bin/phpunit --version | grep -oP '\d+\.\d+' | head -1)
            echo "Detected PHPUnit version: $PHPUNIT_VERSION"
            
            # Define PHP version variable for use in conditions
            PHP_VERSION="${{ matrix.php }}"
            
            # Set up the command based on PHP and PHPUnit versions
            if [[ "$PHP_VERSION" == "8.0" || "$PHP_VERSION" == "8.1" || "$PHP_VERSION" == "8.2" ]]; then
              echo "::notice::Running tests with PHPUnit for PHP $PHP_VERSION"
              
              # For PHP 8.x, check if it's PHPUnit 9.x
              if [[ $(echo "$PHPUNIT_VERSION >= 9.0" | bc -l) -eq 1 ]]; then
                # PHPUnit 9.x on PHP 8.x - safest approach
                echo "::notice::Using PHPUnit 9.x safe execution mode"
                
                # Try running tests directly without any extra flags
                vendor/bin/phpunit || {
                  echo "::warning::Test execution failed. Running individual test files..."
                  EXIT_CODE=0
                  # Try to run each test file individually to isolate issues
                  for TEST_FILE in tests/test-*.php; do
                    echo "Testing file: $TEST_FILE"
                    vendor/bin/phpunit "$TEST_FILE" || EXIT_CODE=1
                  done
                  # Return the combined exit code
                  exit $EXIT_CODE
                }
              else
                # PHPUnit < 9.0 on PHP 8.x - potentially problematic
                echo "::warning::Running PHPUnit version less than 9.0 on PHP 8.x - using compatibility mode"
                # Run with our compatibility layer which should handle the errors
                XDEBUG_MODE=coverage vendor/bin/phpunit
              fi
            else
              # PHP 7.x with PHPUnit 7.x - standard execution
              echo "::notice::Running tests with PHPUnit for PHP $PHP_VERSION"
              vendor/bin/phpunit
            fi
          else
            echo "::error::PHPUnit executable not found in vendor/bin directory."
            ls -la vendor/bin || echo "vendor/bin directory not found"
            exit 1
          fi

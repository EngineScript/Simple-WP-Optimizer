# This workflow runs automated tests for the Simple WP Optimizer plugin against multiple
# WordPress and PHP versions to ensure compatibility across environments.
# It sets up a MySQL database, installs WordPress, and runs PHPUnit tests in a matrix configuration.
# Testing multiple PHP versions (7.4 through 8.2) and WordPress versions (5.6 through latest)
# helps catch compatibility issues before they affect users.

name: WordPress Plugin Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Define permissions
permissions:
  contents: read

jobs:
  # First check if we can run tests (if all required files exist)
  pre-check:
    name: Check Test Files
    runs-on: ubuntu-latest
    outputs:
      can_test: ${{ steps.check-files.outputs.can_test }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check for test files
        id: check-files
        run: |
          if [ -f "composer.json" ] && [ -d "tests" ] && [ -f "tests/bootstrap.php" ] && [ -d "bin" ] && [ -f "bin/install-wp-tests.sh" ]; then
            echo "Required test files found"
            echo "can_test=true" >> $GITHUB_OUTPUT
          else
            echo "Missing required test files - tests will be skipped"
            echo "can_test=false" >> $GITHUB_OUTPUT
          fi
  
  # Main test job - only runs if all required files exist
  test:
    name: WordPress ${{ matrix.wordpress }} - PHP ${{ matrix.php }}
    needs: pre-check
    if: needs.pre-check.outputs.can_test == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php: ['7.4', '8.0', '8.1', '8.2', '8.3', '8.4']
        wordpress: ['latest']
            
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: wordpress_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup PHP ${{ matrix.php }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: dom, curl, libxml, mbstring, zip, pdo, mysql, pdo_mysql, bcmath, intl, gd, exif, iconv
          coverage: none
          tools: composer:v2
      
      - name: Install SVN and jq
        run: |
          sudo apt-get update
          sudo apt-get install -y subversion jq bc
      
      # Simplified PHPUnit installation with better error handling
      - name: Install Dependencies
        run: |
          echo "Installing dependencies for PHP ${{ matrix.php }}"
          
          # Clear composer cache to avoid using corrupted cache
          composer clear-cache
          
          # Remove any existing lock file to ensure clean install
          rm -f composer.lock
          
          # Define PHP version for easier conditions
          PHP_VERSION="${{ matrix.php }}"
          
          # Display PHP version for debugging
          echo "::notice::Debugging environment variables:"
          echo "PHP Version: $PHP_VERSION"
          php -v
          
          # Try composer update before installing PHPUnit
          composer update --no-progress --ignore-platform-reqs || {
            echo "::error::Composer update failed. Attempting direct installation..."
            # Try direct installation if update fails
            composer install --no-progress --ignore-platform-reqs || {
              echo "::error::Dependency installation failed. Debugging composer state:"
              composer diagnose
              # Try with --no-plugins as a last resort
              echo "Trying installation with --no-plugins flag"
              composer install --no-progress --ignore-platform-reqs --no-plugins || exit 1
            }
          }
          
          # Attempt PHPUnit installation if necessary
          if [ ! -f "vendor/bin/phpunit" ]; then
            echo "PHPUnit not found, attempting to install specific version..."
            # For PHP 8.x, especially 8.3 and 8.4, use the latest PHPUnit
            if [[ "$PHP_VERSION" == "8.3" || "$PHP_VERSION" == "8.4" ]]; then
              echo "Installing latest compatible PHPUnit for PHP $PHP_VERSION"
              composer require --dev phpunit/phpunit:^10.0 yoast/phpunit-polyfills:^2.0 --no-progress --ignore-platform-reqs || {
                echo "::error::PHPUnit installation failed. Debugging composer error logs:"
                composer diagnose || echo "Composer diagnose command failed"
                exit 1
              }
            elif [[ "$PHP_VERSION" == "8.0" || "$PHP_VERSION" == "8.1" || "$PHP_VERSION" == "8.2" ]]; then
              # For PHP 8.0, 8.1, and 8.2, use PHPUnit 9.5
              echo "Installing PHPUnit 9.5 for PHP $PHP_VERSION"
              composer require --dev phpunit/phpunit:^9.5 yoast/phpunit-polyfills:^2.0 --no-progress --ignore-platform-reqs || {
                echo "::error::PHPUnit installation failed. Debugging composer error logs:"
                composer diagnose || echo "Composer diagnose command failed"
                exit 1
              }
            else
              # For PHP 7.4, use PHPUnit 7.5
              echo "Installing PHPUnit 7.5 for PHP 7.4"
              composer require --dev phpunit/phpunit:^7.5 yoast/phpunit-polyfills:^1.0 --no-progress --ignore-platform-reqs || {
                echo "::error::PHPUnit installation failed. Debugging composer error logs:"
                composer diagnose || echo "Composer diagnose command failed"
                exit 1
              }
            fi
          fi
          
          # Verify PHPUnit installation
          if [ ! -f "vendor/bin/phpunit" ]; then
            echo "::error::PHPUnit installation unsuccessful. Cannot continue with tests."
            ls -la vendor/bin || echo "vendor/bin directory not found or empty"
            exit 1
          fi
          
          # Show installed PHPUnit version
          echo "Installed PHPUnit version:"
          vendor/bin/phpunit --version || echo "PHPUnit seems to be installed but not working properly"
      
      - name: Check Test Environment
        id: check-test-env
        run: |
          if [ ! -f "bin/install-wp-tests.sh" ]; then
            echo "::warning::bin/install-wp-tests.sh script not found. Tests will be skipped."
            echo "test_env_ready=false" >> $GITHUB_OUTPUT
          elif [ ! -d "tests" ]; then
            echo "::warning::tests directory not found. Tests will be skipped."
            echo "test_env_ready=false" >> $GITHUB_OUTPUT
          else
            echo "test_env_ready=true" >> $GITHUB_OUTPUT
          fi
      
      # Enhanced WordPress Test Environment Setup
      - name: Setup WordPress Test Environment
        if: steps.check-test-env.outputs.test_env_ready == 'true'
        run: |
          # Ensure database exists and is clean
          echo "Setting up test database..."
          mysql -u root -h 127.0.0.1 -e "DROP DATABASE IF EXISTS wordpress_test;"
          mysql -u root -h 127.0.0.1 -e "CREATE DATABASE wordpress_test;"
          
          # Make the install script executable
          chmod +x bin/install-wp-tests.sh
          
          # Verify that the local db.php file exists
          if [ ! -f "bin/db.php" ]; then
            echo "::error::bin/db.php not found! This is required for the WordPress test environment setup."
            ls -la bin/ || echo "bin directory not found or empty"
            exit 1
          else
            echo "Local db.php file found - it will be used for the MySQL database driver"
          fi
          
          # Create and fix permissions for /tmp directory
          sudo mkdir -p /tmp/wordpress-tests-lib
          
          # Create main directory to handle root path mismatch
          sudo mkdir -p /wordpress-tests-lib
          
          # Set proper permissions
          sudo chmod 1777 /tmp
          sudo chmod 1777 /tmp/wordpress-tests-lib
          sudo chmod 1777 /wordpress-tests-lib
          
          # Create a symlink to handle path discrepancies
          echo "Creating symlink to ensure path compatibility..."
          sudo ln -sf /tmp/wordpress-tests-lib/* /wordpress-tests-lib/ || echo "Warning: Symlink creation failed, will try direct copy later"
          
          # Export WP_TESTS_DIR to ensure all scripts use the correct path
          export WP_TESTS_DIR=/tmp/wordpress-tests-lib
          echo "WP_TESTS_DIR=$WP_TESTS_DIR" >> $GITHUB_ENV
          
          # Define variables for WordPress version
          WP_VERSION="${{ matrix.wordpress }}"
          
          # Run the script with detailed logging
          echo "Installing WordPress test environment for version $WP_VERSION..."
          bash bin/install-wp-tests.sh wordpress_test root '' 127.0.0.1 $WP_VERSION || {
            echo "::error::Failed to setup WordPress test environment. Showing detailed error information:"
            find /tmp -name "wordpress-tests-lib-install-*.log" -exec cat {} \; 2>/dev/null || echo "No install logs found."
            ls -la /tmp/wordpress-tests-lib || echo "/tmp/wordpress-tests-lib directory not found"
            
            # Try one more time with explicitly created directory
            echo "Retrying WordPress test environment setup..."
            sudo rm -rf /tmp/wordpress-tests-lib || echo "Failed to remove old test dir"
            sudo mkdir -p /tmp/wordpress-tests-lib
            sudo chmod 1777 /tmp/wordpress-tests-lib
            
            # Make sure WP_TESTS_DIR is set correctly for the retry
            export WP_TESTS_DIR=/tmp/wordpress-tests-lib
            echo "WP_TESTS_DIR=$WP_TESTS_DIR" >> $GITHUB_ENV
            
            bash bin/install-wp-tests.sh wordpress_test root '' 127.0.0.1 $WP_VERSION || {
              echo "::error::Failed to setup WordPress test environment on second attempt."
              
              # Last resort - try manually setting up core files
              echo "Attempting manual setup of core files as final fallback..."
              mkdir -p "$WP_TESTS_DIR/includes"
              
              # Try to download the essential files directly
              curl -s https://develop.svn.wordpress.org/trunk/tests/phpunit/includes/functions.php > "$WP_TESTS_DIR/includes/functions.php"
              curl -s https://develop.svn.wordpress.org/trunk/tests/phpunit/includes/bootstrap.php > "$WP_TESTS_DIR/includes/bootstrap.php"
              curl -s https://develop.svn.wordpress.org/trunk/wp-tests-config-sample.php > "$WP_TESTS_DIR/wp-tests-config.php"
              
              # Configure wp-tests-config.php
              sed -i "s:dirname( __FILE__ ) . '/src/':'/tmp/wordpress/':" "$WP_TESTS_DIR/wp-tests-config.php"
              sed -i "s/youremptytestdbnamehere/wordpress_test/" "$WP_TESTS_DIR/wp-tests-config.php"
              sed -i "s/yourusernamehere/root/" "$WP_TESTS_DIR/wp-tests-config.php"
              sed -i "s/yourpasswordhere//" "$WP_TESTS_DIR/wp-tests-config.php"
              sed -i "s|localhost|127.0.0.1|" "$WP_TESTS_DIR/wp-tests-config.php"
              
              # Copy to the alternate path as well
              sudo mkdir -p /wordpress-tests-lib/includes/
              sudo cp -R "$WP_TESTS_DIR"/* /wordpress-tests-lib/
              
              # Verify if manual setup succeeded
              if [ -f "$WP_TESTS_DIR/includes/functions.php" ]; then
                echo "Manual fallback setup succeeded."
              else
                echo "Manual fallback setup failed. Cannot proceed with tests."
                exit 1
              fi
            }
          }
          
          # Verify the test environment was created successfully
          if [ ! -d "/tmp/wordpress-tests-lib" ]; then
            echo "::error::WordPress test directory not created at /tmp/wordpress-tests-lib."
            exit 1
          fi
          
          if [ ! -f "/tmp/wordpress-tests-lib/includes/functions.php" ]; then
            echo "::error::WordPress test functions file missing at /tmp/wordpress-tests-lib/includes/functions.php."
            ls -la /tmp/wordpress-tests-lib/includes/ || echo "Includes directory not found or empty"
            exit 1
          fi
          
          # Ensure files are also available at non-tmp path (for scripts that may hardcode the path)
          echo "Syncing files to the /wordpress-tests-lib directory..."
          sudo mkdir -p /wordpress-tests-lib/includes/
          sudo cp -R /tmp/wordpress-tests-lib/* /wordpress-tests-lib/ || {
            echo "::warning::Failed to copy files to /wordpress-tests-lib - trying with rsync"
            sudo apt-get install -y rsync
            sudo rsync -a /tmp/wordpress-tests-lib/ /wordpress-tests-lib/ || echo "::warning::Failed to sync files with rsync"
          }
          
          # Verify files in both locations
          if [ -f "/wordpress-tests-lib/includes/functions.php" ]; then
            echo "WordPress test files successfully copied to /wordpress-tests-lib/"
          else
            echo "::warning::Files may be missing in /wordpress-tests-lib, creating core files if needed"
            sudo mkdir -p /wordpress-tests-lib/includes/
            sudo cp -f /tmp/wordpress-tests-lib/includes/functions.php /wordpress-tests-lib/includes/ || echo "::warning::Failed to copy functions.php"
            sudo cp -f /tmp/wordpress-tests-lib/wp-tests-config.php /wordpress-tests-lib/ || echo "::warning::Failed to copy wp-tests-config.php"
          fi
          
          # Create or copy required class-basic-object.php file if missing
          if [ ! -f "/tmp/wordpress-tests-lib/includes/class-basic-object.php" ]; then
            echo "Creating missing class-basic-object.php file in /tmp/wordpress-tests-lib..."
            cat > /tmp/wordpress-tests-lib/includes/class-basic-object.php << 'EOF'
<?php
/**
 * Basic object, which other objects in WordPress extend.
 *
 * This is a simplified version for tests to fix the missing class issue.
 */
class Basic_Object {
    /**
     * Retrieve a value from an array with support for a default value.
     *
     * @param array  \$args  Arguments.
     * @param string \$key   Key to retrieve.
     * @param mixed  \$default Default value.
     * @return mixed Value if set, default if not.
     */
    protected function get_from_array( \$args, \$key, \$default = null ) {
        if ( isset( \$args[ \$key ] ) ) {
            return \$args[ \$key ];
        }
        return \$default;
    }
}
EOF
          fi
          
          # Copy to the alternate path as well
          if [ ! -f "/wordpress-tests-lib/includes/class-basic-object.php" ]; then
            sudo mkdir -p /wordpress-tests-lib/includes/
            if [ -f "/tmp/wordpress-tests-lib/includes/class-basic-object.php" ]; then
              sudo cp -f /tmp/wordpress-tests-lib/includes/class-basic-object.php /wordpress-tests-lib/includes/ || echo "::warning::Failed to copy class-basic-object.php"
            else
              echo "Creating missing class-basic-object.php file in /wordpress-tests-lib..."
              sudo bash -c 'cat > /wordpress-tests-lib/includes/class-basic-object.php << '\''EOF'\''
<?php
/**
 * Basic object, which other objects in WordPress extend.
 *
 * This is a simplified version for tests to fix the missing class issue.
 */
class Basic_Object {
    /**
     * Retrieve a value from an array with support for a default value.
     *
     * @param array  \$args  Arguments.
     * @param string \$key   Key to retrieve.
     * @param mixed  \$default Default value.
     * @return mixed Value if set, default if not.
     */
    protected function get_from_array( \$args, \$key, \$default = null ) {
        if ( isset( \$args[ \$key ] ) ) {
            return \$args[ \$key ];
        }
        return \$default;
    }
}
EOF'
            fi
          fi
          
          # Check WordPress core installation and verify db.php was copied
          if [ ! -d "/tmp/wordpress" ]; then
            echo "::error::WordPress core directory not created."
            exit 1
          fi
          
          # Verify db.php was copied successfully to WordPress content directory
          if [ ! -f "/tmp/wordpress/wp-content/db.php" ]; then
            echo "::error::db.php file not copied to WordPress content directory."
            echo "Copying the db.php file manually as a final fallback..."
            mkdir -p /tmp/wordpress/wp-content/
            cp bin/db.php /tmp/wordpress/wp-content/db.php || echo "Failed to copy db.php manually"
          else
            echo "db.php file successfully installed in WordPress content directory."
          fi
          
          echo "WordPress test environment successfully set up:"
          ls -la /tmp/wordpress-tests-lib/
      
      - name: Run tests
        if: steps.check-test-env.outputs.test_env_ready == 'true'
        run: |
          if [ ! -f "vendor/bin/phpunit" ]; then
            echo "::error::PHPUnit executable not found in vendor/bin directory."
            ls -la vendor/bin || echo "vendor/bin directory not found"
            exit 1
          fi
          
          # Get the PHPUnit version
          PHPUNIT_VERSION=$(vendor/bin/phpunit --version | grep -oP '\d+\.\d+' | head -1 || echo "unknown")
          echo "Detected PHPUnit version: $PHPUNIT_VERSION"
          
          # Define PHP version variable for use in conditions
          PHP_VERSION="${{ matrix.php }}"
          
          # Ensure we have proper error reporting for tests
          export WP_TESTS_PHPUNIT_POLYFILLS_PATH=$(pwd)/vendor/yoast/phpunit-polyfills
          
          # Set the WP_TESTS_DIR explicitly to ensure all scripts use the correct path
          export WP_TESTS_DIR=/tmp/wordpress-tests-lib
          echo "Using WordPress test directory: $WP_TESTS_DIR"
          
          # Check WordPress test environment
          echo "Verifying WordPress test environment..."
          if [ ! -d "$WP_TESTS_DIR" ] || [ ! -f "$WP_TESTS_DIR/includes/functions.php" ]; then
            echo "::error::WordPress test environment verification failed at $WP_TESTS_DIR. Missing required files."
            
            # Check alternate paths as fallback
            if [ -d "/wordpress-tests-lib" ] && [ -f "/wordpress-tests-lib/includes/functions.php" ]; then
              echo "::warning::Found WordPress test files at /wordpress-tests-lib instead, switching to this path."
              export WP_TESTS_DIR=/wordpress-tests-lib
            else
              exit 1
            fi
          fi
          
          # Show test environment info for debugging
          echo "Final WordPress test environment information:"
          echo "WP_TESTS_DIR: $WP_TESTS_DIR"
          ls -la $WP_TESTS_DIR/includes/ || echo "Cannot list includes directory"
          echo "WordPress content directory:"
          ls -la /tmp/wordpress/wp-content/ || echo "Cannot list wp-content directory"
          
          # PHP 8.x specific handling
          if [[ "$PHP_VERSION" == "8.0" || "$PHP_VERSION" == "8.1" || "$PHP_VERSION" == "8.2" || "$PHP_VERSION" == "8.3" || "$PHP_VERSION" == "8.4" ]]; then
            echo "Running tests with PHP $PHP_VERSION compatibility mode"
            
            # For PHP 8.x, we'll use our custom run-phpunit.php script
            if [ -f "run-phpunit.php" ]; then
              php run-phpunit.php || {
                echo "::warning::Tests failed with run-phpunit.php, trying individual test files..."
                EXIT_CODE=0
                # Try to run each test file individually to isolate issues
                for TEST_FILE in tests/test-*.php; do
                  echo "Testing file: $TEST_FILE"
                  php run-phpunit.php "$TEST_FILE" || EXIT_CODE=1
                done
                exit $EXIT_CODE
              }
            else
              # Fallback if custom script is missing - suppress deprecation warnings
              php -d error_reporting=E_ALL^E_DEPRECATED vendor/bin/phpunit || {
                echo "::warning::Tests failed with standard execution, trying individual test files..."
                EXIT_CODE=0
                for TEST_FILE in tests/test-*.php; do
                  echo "Testing file: $TEST_FILE"
                  php -d error_reporting=E_ALL^E_DEPRECATED vendor/bin/phpunit "$TEST_FILE" || EXIT_CODE=1
                done
                exit $EXIT_CODE
              }
            fi
          else
            # Standard execution for PHP 7.4
            echo "Running tests with PHP $PHP_VERSION standard mode"
            vendor/bin/phpunit || {
              echo "::warning::Tests failed with standard execution, trying individual test files..."
              EXIT_CODE=0
              for TEST_FILE in tests/test-*.php; do
                echo "Testing file: $TEST_FILE"
                vendor/bin/phpunit "$TEST_FILE" || EXIT_CODE=1
              done
              exit $EXIT_CODE
            }
          fi

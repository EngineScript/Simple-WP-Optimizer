# This workflow runs automated tests for the Simple WP Optimizer plugin against multiple
# WordPress and PHP versions to ensure compatibility across environments.
# It sets up a MySQL database, installs WordPress, and runs PHPUnit tests in a matrix configuration.
# Testing multiple PHP versions (7.4 through 8.2) and WordPress versions (5.6 through latest)
# helps catch compatibility issues before they affect users.

name: WordPress Plugin Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Define permissions
permissions:
  contents: read

jobs:
  # First check if we can run tests (if all required files exist)
  pre-check:
    name: Check Test Files
    runs-on: ubuntu-latest
    outputs:
      can_test: ${{ steps.check-files.outputs.can_test }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check for test files
        id: check-files
        run: |
          if [ -f "composer.json" ] && [ -d "tests" ] && [ -f "tests/bootstrap.php" ] && [ -d "bin" ] && [ -f "bin/install-wp-tests.sh" ]; then
            echo "Required test files found"
            echo "can_test=true" >> $GITHUB_OUTPUT
          else
            echo "Missing required test files - tests will be skipped"
            echo "can_test=false" >> $GITHUB_OUTPUT
          fi
  
  # Main test job - only runs if all required files exist
  test:
    name: WordPress ${{ matrix.wordpress }} - PHP ${{ matrix.php }}
    needs: pre-check
    if: needs.pre-check.outputs.can_test == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php: ['7.4', '8.0', '8.1']
        wordpress: ['latest', '6.0', '5.9']
        include:
          - php: '8.2'
            wordpress: 'latest'
          - php: '7.4'
            wordpress: '5.6'
            
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: wordpress_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup PHP ${{ matrix.php }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: dom, curl, libxml, mbstring, zip, pdo, mysql, pdo_mysql, bcmath, intl, gd, exif, iconv
          coverage: none
      
      - name: Install SVN and jq
        run: |
          sudo apt-get update
          sudo apt-get install -y subversion jq bc
      
      # Simplified PHPUnit installation with better error handling
      - name: Install Dependencies
        run: |
          echo "Installing dependencies for PHP ${{ matrix.php }}"
          
          # Clear composer cache to avoid using corrupted cache
          composer clear-cache
          
          # Remove any existing lock file to ensure clean install
          rm -f composer.lock
          
          # Define PHP version for easier conditions
          PHP_VERSION="${{ matrix.php }}"
          
          # Display PHP version for debugging
          echo "::notice::Debugging environment variables:"
          echo "PHP Version: $PHP_VERSION"
          php -v
          
          # Try composer update before installing PHPUnit
          composer update --no-progress --ignore-platform-reqs || {
            echo "::error::Composer update failed. Attempting direct installation..."
            # Try direct installation if update fails
            composer install --no-progress --ignore-platform-reqs || {
              echo "::error::Dependency installation failed. Debugging composer state:"
              composer diagnose
              # Try with --no-plugins as a last resort
              echo "Trying installation with --no-plugins flag"
              composer install --no-progress --ignore-platform-reqs --no-plugins || exit 1
            }
          }
          
          # Attempt PHPUnit installation if necessary
          if [ ! -f "vendor/bin/phpunit" ]; then
            echo "PHPUnit not found, attempting to install specific version..."
            composer require --dev phpunit/phpunit:^9.5 yoast/phpunit-polyfills:^2.0 --no-progress --ignore-platform-reqs || {
              echo "::error::PHPUnit installation failed. Debugging composer error logs:"
              composer diagnose || echo "Composer diagnose command failed"
              exit 1
            }
          fi
          
          # Verify PHPUnit installation
          if [ ! -f "vendor/bin/phpunit" ]; then
            echo "::error::PHPUnit installation unsuccessful. Cannot continue with tests."
            ls -la vendor/bin || echo "vendor/bin directory not found or empty"
            exit 1
          fi
          
          # Show installed PHPUnit version
          echo "Installed PHPUnit version:"
          vendor/bin/phpunit --version || echo "PHPUnit seems to be installed but not working properly"
      
      - name: Check Test Environment
        id: check-test-env
        run: |
          if [ ! -f "bin/install-wp-tests.sh" ]; then
            echo "::warning::bin/install-wp-tests.sh script not found. Tests will be skipped."
            echo "test_env_ready=false" >> $GITHUB_OUTPUT
          elif [ ! -d "tests" ]; then
            echo "::warning::tests directory not found. Tests will be skipped."
            echo "test_env_ready=false" >> $GITHUB_OUTPUT
          else
            echo "test_env_ready=true" >> $GITHUB_OUTPUT
          fi
      
      # Enhanced WordPress Test Environment Setup
      - name: Setup WordPress Test Environment
        if: steps.check-test-env.outputs.test_env_ready == 'true'
        run: |
          # Ensure database exists and is clean
          echo "Setting up test database..."
          mysql -u root -h 127.0.0.1 -e "DROP DATABASE IF EXISTS wordpress_test;"
          mysql -u root -h 127.0.0.1 -e "CREATE DATABASE wordpress_test;"
          
          # Make the install script executable
          chmod +x bin/install-wp-tests.sh
          
          # Create and fix permissions for /tmp directory
          sudo mkdir -p /tmp/wordpress-tests-lib
          sudo chmod 1777 /tmp
          sudo chmod 1777 /tmp/wordpress-tests-lib
          
          # Define variables for WordPress version
          WP_VERSION="${{ matrix.wordpress }}"
          
          # Run the script with detailed logging
          echo "Installing WordPress test environment for version $WP_VERSION..."
          bash bin/install-wp-tests.sh wordpress_test root '' 127.0.0.1 $WP_VERSION || {
            echo "::error::Failed to setup WordPress test environment. Showing detailed error information:"
            find /tmp -name "wordpress-tests-lib-install-*.log" -exec cat {} \; 2>/dev/null || echo "No install logs found."
            ls -la /tmp/wordpress-tests-lib || echo "/tmp/wordpress-tests-lib directory not found"
            
            # Try one more time with explicitly created directory
            echo "Retrying WordPress test environment setup..."
            bash bin/install-wp-tests.sh wordpress_test root '' 127.0.0.1 $WP_VERSION || {
              echo "::error::Failed to setup WordPress test environment on second attempt."
              exit 1
            }
          }
          
          # Verify the test environment was created successfully
          if [ ! -d "/tmp/wordpress-tests-lib" ]; then
            echo "::error::WordPress test directory not created."
            exit 1
          fi
          
          if [ ! -f "/tmp/wordpress-tests-lib/includes/functions.php" ]; then
            echo "::error::WordPress test functions file missing."
            ls -la /tmp/wordpress-tests-lib/includes/ || echo "Includes directory not found or empty"
            exit 1
          fi
          
          # Check WordPress core installation
          if [ ! -d "/tmp/wordpress" ]; then
            echo "::error::WordPress core directory not created."
            exit 1
          fi
          
          echo "WordPress test environment successfully set up:"
          ls -la /tmp/wordpress-tests-lib/
      
      - name: Run tests
        if: steps.check-test-env.outputs.test_env_ready == 'true'
        run: |
          if [ ! -f "vendor/bin/phpunit" ]; then
            echo "::error::PHPUnit executable not found in vendor/bin directory."
            ls -la vendor/bin || echo "vendor/bin directory not found"
            exit 1
          fi
          
          # Get the PHPUnit version
          PHPUNIT_VERSION=$(vendor/bin/phpunit --version | grep -oP '\d+\.\d+' | head -1 || echo "unknown")
          echo "Detected PHPUnit version: $PHPUNIT_VERSION"
          
          # Define PHP version variable for use in conditions
          PHP_VERSION="${{ matrix.php }}"
          
          # Ensure we have proper error reporting for tests
          export WP_TESTS_PHPUNIT_POLYFILLS_PATH=$(pwd)/vendor/yoast/phpunit-polyfills
          
          # Check WordPress test environment
          echo "Verifying WordPress test environment..."
          if [ ! -d "/tmp/wordpress-tests-lib" ] || [ ! -f "/tmp/wordpress-tests-lib/includes/functions.php" ]; then
            echo "::error::WordPress test environment verification failed. Missing required files."
            exit 1
          fi
          
          # PHP 8.x specific handling
          if [[ "$PHP_VERSION" == "8.0" || "$PHP_VERSION" == "8.1" || "$PHP_VERSION" == "8.2" ]]; then
            echo "Running tests with PHP $PHP_VERSION compatibility mode"
            
            # For PHP 8.x, we'll use our custom run-phpunit.php script
            if [ -f "run-phpunit.php" ]; then
              php run-phpunit.php || {
                echo "::warning::Tests failed with run-phpunit.php, trying individual test files..."
                EXIT_CODE=0
                # Try to run each test file individually to isolate issues
                for TEST_FILE in tests/test-*.php; do
                  echo "Testing file: $TEST_FILE"
                  php run-phpunit.php "$TEST_FILE" || EXIT_CODE=1
                done
                exit $EXIT_CODE
              }
            else
              # Fallback if custom script is missing - suppress deprecation warnings
              php -d error_reporting=E_ALL^E_DEPRECATED vendor/bin/phpunit || {
                echo "::warning::Tests failed with standard execution, trying individual test files..."
                EXIT_CODE=0
                for TEST_FILE in tests/test-*.php; do
                  echo "Testing file: $TEST_FILE"
                  php -d error_reporting=E_ALL^E_DEPRECATED vendor/bin/phpunit "$TEST_FILE" || EXIT_CODE=1
                done
                exit $EXIT_CODE
              }
            fi
          else
            # Standard execution for PHP 7.x
            echo "Running tests with PHP $PHP_VERSION standard mode"
            vendor/bin/phpunit || {
              echo "::warning::Tests failed with standard execution, trying individual test files..."
              EXIT_CODE=0
              for TEST_FILE in tests/test-*.php; do
                echo "Testing file: $TEST_FILE"
                vendor/bin/phpunit "$TEST_FILE" || EXIT_CODE=1
              done
              exit $EXIT_CODE
            }
          fi

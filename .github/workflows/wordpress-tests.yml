# This workflow runs automated tests for the Simple WP Optimizer plugin against multiple
# WordPress and PHP versions to ensure compatibility across environments.
# It sets up a MySQL database, installs WordPress, and runs PHPUnit tests in a matrix configuration.
# Testing multiple PHP versions (7.4 through 8.2) and WordPress versions (5.6 through latest)
# helps catch compatibility issues before they affect users.

name: WordPress Plugin Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Define permissions
permissions:
  contents: read

jobs:
  # First check if we can run tests (if all required files exist)
  pre-check:
    name: Check Test Files
    runs-on: ubuntu-latest
    outputs:
      can_test: ${{ steps.check-files.outputs.can_test }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check for test files
        id: check-files
        run: |
          if [ -f "composer.json" ] && [ -d "tests" ] && [ -f "tests/bootstrap.php" ] && [ -d "bin" ] && [ -f "bin/install-wp-tests.sh" ]; then
            echo "Required test files found"
            echo "can_test=true" >> $GITHUB_OUTPUT
          else
            echo "Missing required test files - tests will be skipped"
            echo "can_test=false" >> $GITHUB_OUTPUT
          fi
  
  # Main test job - only runs if all required files exist
  test:
    name: WordPress ${{ matrix.wordpress }} - PHP ${{ matrix.php }}
    needs: pre-check
    if: needs.pre-check.outputs.can_test == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php: ['7.4', '8.0', '8.1']
        wordpress: ['latest', '6.0', '5.9']
        include:
          - php: '8.2'
            wordpress: 'latest'
          - php: '7.4'
            wordpress: '5.6'
            
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: wordpress_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup PHP ${{ matrix.php }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: dom, curl, libxml, mbstring, zip, pdo, mysql, pdo_mysql, bcmath, intl, gd, exif, iconv
          coverage: none
      
      - name: Install SVN
        run: |
          sudo apt-get update
          sudo apt-get install -y subversion
      
      - name: Install Composer dependencies
        uses: ramsey/composer-install@v3
        with:
          composer-options: "--prefer-dist --no-progress"
        continue-on-error: true
      
      - name: Verify Composer installation
        run: |
          if [ ! -d "vendor" ]; then
            echo "::warning::Composer vendor directory not found. Installing dependencies manually."
            composer install --no-progress
          fi
          if [ ! -f "vendor/bin/phpunit" ]; then
            echo "::warning::PHPUnit not found in vendor/bin. Installing phpunit explicitly."
            composer require phpunit/phpunit:^7.5 --dev --no-progress
          fi
      
      - name: Check Test Environment
        id: check-test-env
        run: |
          if [ ! -f "bin/install-wp-tests.sh" ]; then
            echo "::warning::bin/install-wp-tests.sh script not found. Tests will be skipped."
            echo "test_env_ready=false" >> $GITHUB_OUTPUT
          elif [ ! -d "tests" ]; then
            echo "::warning::tests directory not found. Tests will be skipped."
            echo "test_env_ready=false" >> $GITHUB_OUTPUT
          else
            echo "test_env_ready=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Setup WordPress Test Environment
        if: steps.check-test-env.outputs.test_env_ready == 'true'
        run: |
          if mysql -u root -h 127.0.0.1 -e "USE wordpress_test;" 2>/dev/null; then
            echo "Database 'wordpress_test' already exists. Dropping it first."
            mysql -u root -h 127.0.0.1 -e "DROP DATABASE wordpress_test;"
          fi
          bash bin/install-wp-tests.sh wordpress_test root '' 127.0.0.1 ${{ matrix.wordpress }}
      
      - name: Run tests
        if: steps.check-test-env.outputs.test_env_ready == 'true'
        run: |
          if [ -f "vendor/bin/phpunit" ]; then
            vendor/bin/phpunit
          else
            echo "::error::PHPUnit executable not found in vendor/bin directory."
            ls -la vendor/bin || echo "vendor/bin directory not found"
            exit 1
          fi
